// Alex perplexity O bloco abaixo define o objeto "livros" que armazena informações sobre os livros da Bíblia
const livros = {
    "genesis": {
        "capitulos": 50
    },
    "exodo": {
        "capitulos": 40
    },
    // adicione os demais livros e capítulos conforme necessário
};

// O bloco abaixo cria as variáveis globais para o elemento H2, livro ativo e botões de versículos ativo
let titulo = null;
let activeVersiculoButton = null;
let activeLivro = null;
let activeCapitulo = null;

// O bloco abaixo cria a função para configurar os botões dos capítulos
function createCapitulosButtons(livro) {
    const capitulos = livros[livro].capitulos;
    const capitulosContainer = document.createElement('div');
    capitulosContainer.classList.add('capitulos');

    for (let i = 1; i <= capitulos; i++) {
        const button = document.createElement('button');
        button.textContent = `${i}`;
        button.classList.add('botao-capitulo');
        button.addEventListener('click', () => {
            toggleVersiculos(livro, i);
        });
        capitulosContainer.appendChild(button);
    }
    return capitulosContainer;
}

// O bloco abaixo cria a função para carregar o conteúdo de um versículo específico
async function loadVersiculo(livro, capitulo, versiculo) {
    const response = await fetch(`json/${livro}_original.json`);
    const data = await response.json();
    
    const versiculoContent = data[livro][capitulo].versiculos[versiculo - 1]; // Ajuste para índice zero
    const content = document.querySelector('.content');

    // O trecho abaixo remove qualquer texto de versículo existente
    const existingVersiculo = content.querySelector('.versiculo-texto');
    if (existingVersiculo) {
        existingVersiculo.remove();
    }

    const versiculoElement = document.createElement('div');
    versiculoElement.classList.add('versiculo', 'versiculo-texto');
    versiculoElement.textContent = versiculoContent || 'Versículo não encontrado.';

    content.appendChild(versiculoElement);
    titulo.textContent = `${livro.toUpperCase()} - CAPÍTULO ${capitulo} - VERSÍCULO ${versiculo}`;
}

// O bloco abaixo cria a função para exibir/ocultar os versículos
function toggleVersiculos(livro, capitulo) {
    const content = document.querySelector('.content');
    
    // O trecho abaixo procura por elementos dos versículos ou capítulos existentes
    const existingVersiculos = content.querySelector(`.versiculos-${livro}-${capitulo}`);
    const allVersiculos = content.querySelectorAll('.book-content');

    if (existingVersiculos) {
        existingVersiculos.remove();
        
        // O trecho abaixo remove o texto do versículo se os versículos forem recolhidos
        const existingVersiculo = content.querySelector('.versiculo-texto');
        if (existingVersiculo) {
            existingVersiculo.remove();
        }
    } else {
        // O trecho abaixo remove qualquer exibição anterior de capítulos e versículos
        allVersiculos.forEach(versiculo => versiculo.remove());

        // O trecho abaixo remove o texto do versículo quando um novo capítulo é clicado
        const existingVersiculo = content.querySelector('.versiculo-texto');
        if (existingVersiculo) {
            existingVersiculo.remove();
        }

        // O trecho abaixo adiciona os versículos do novo capítulo
        const bookContent = document.createElement('div');
        bookContent.classList.add('book-content', `versiculos-${livro}-${capitulo}`);
        titulo.textContent = `${livro.toUpperCase()} - CAPÍTULO ${capitulo}`;
        bookContent.appendChild(createVersiculosButtons(livro, capitulo));
        content.appendChild(bookContent);
        
        // A linha abaixo atualiza o capítulo ativo
        activeCapitulo = capitulo;
        
        // Aqui você pode carregar os versículos automaticamente se desejar
        for (let i = 1; i <= getNumVersiculos(livro, capitulo); i++) {
            loadVersiculo(livro, capitulo, i);
        }
    }
}

// O bloco abaixo cria a função para carregar o livro
function loadBook(livro) {
    const content = document.querySelector('.content');

    // O trecho abaixo verifica se o livro clicado é o mesmo que está ativo
    if (activeLivro === livro) {
        // O trecho abaixo verifica se e o mesmo livro, remove apenas os capítulos e versículos, mantendo a marca d'água
        const capitulosContainer = content.querySelector('.capitulos-container');
        const versiculoTexto = content.querySelector('.versiculo-texto');
        if (capitulosContainer) {
            capitulosContainer.remove();
        }
        if (versiculoTexto) {
            versiculoTexto.remove();
        }
        titulo.textContent = '';

        // O trecho abaixo remove todos os botões de capítulos e versículos
        const allBookContents = content.querySelectorAll('.book-content');
        allBookContents.forEach(content => content.remove());

        // O trecho abaixo limpa o livro ativo
        activeLivro = null;
        activeCapitulo = null;
        return;
    }

    // O trecho abaixo limpa o conteúdo anterior, exceto a marca d'água
    const elementsToRemove = content.querySelectorAll('h2, .capitulos-container, .versiculo-texto, .book-content');
    elementsToRemove.forEach(element => element.remove());

    // O trecho abaixo adiciona o título do livro e os botões de capítulos
    titulo = document.createElement('h2');
    titulo.textContent = `${livro.toUpperCase()}`;
    content.appendChild(titulo);

    const capitulosContainer = document.createElement('div');
    capitulosContainer.classList.add('capitulos-container');
    capitulosContainer.appendChild(createCapitulosButtons(livro));

    content.appendChild(capitulosContainer);

    // O trecho abaixo define o livro ativo como o livro atual
    activeLivro = livro;
}

// O bloco abaixo adiciona eventos de clique aos links dos livros
document.querySelectorAll('.menu-livros a').forEach(link => {
    link.addEventListener('click', (event) => {
        event.preventDefault();
        const livro = link.dataset.livro;
        loadBook(livro);
    });
});

// O bloco abaixo cria a função para configurar os botões de versículos
function createVersiculosButtons(livro, capitulo) {
    const versiculosContainer = document.createElement('div');
    versiculosContainer.classList.add('versiculos');

    const numVersiculos = getNumVersiculos(livro, capitulo);
    for (let i = 1; i <= numVersiculos; i++) {
        const button = document.createElement('button');
        button.textContent = ` ${i}`;
        button.classList.add('botao-versiculo');
        button.addEventListener('click', () => {
            toggleVersiculoText(livro, capitulo, i, button);
        });
        versiculosContainer.appendChild(button);
    }
    return versiculosContainer;
}

// O bloco abaixo cria a função para alternar o texto do versículo
function toggleVersiculoText(livro, capitulo, versiculo, button) {
    if (activeVersiculoButton === button) {
        // O trecho abaixo verifica se o botão clicado for o mesmo, caso sim, remover o texto
        const existingVersiculo = document.querySelector('.versiculo-texto');
        if (existingVersiculo) {
            existingVersiculo.remove();
        }
        activeVersiculoButton = null;
    } else {
        // O trecho abaixo verifica se é outro botão, caso sim, carregar o novo versículo
        loadVersiculo(livro, capitulo, versiculo);
        activeVersiculoButton = button;
    }
}

// O bloco abaixo cria a função para obter o número de versículos em um capítulo específico
function getNumVersiculos(livro, capitulo) {
   const versiculosPorCapitulo = {
       "genesis": {
           1: 31,
           2: 25,
           3: 24,
           4: 26,
           5: 32,
           6: 22,
           7: 24,
           8: 22,
           9: 29,
           10: 32,
           11: 32,
           12: 20,
           13: 18,
           14: 24,
           15: 21,
           16: 16,
           17: 27,
           18: 33,
           19: 38,
           20: 18,
           21: 34,
           22: 24,
           23: 20,
           24: 67,
           25: 34,
           26: 35,
           27: 46,
           28: 22,
           29: 35,
           30: 43,
           31: 55,
           32: 32,
           33: 20,
           34: 31,
           35: 29,
           // adicione mais capítulos conforme necessário 
       },
       // adicione outros livros conforme necessário 
   };
   return versiculosPorCapitulo[livro]?.[capitulo] || 0;
};

// O bloco abaixo carrega a imagem da Bíblia assim que a página abre
window.onload = () => {
   const content = document.querySelector('.content');
   const watermarkContainer = document.createElement('div');
   watermarkContainer.classList.add('watermark');

   const img = document.createElement('img');
   img.src = 'biblia.png';
   img.alt = "Marca d'água da Bíblia";
   img.classList.add('watermark-image');

   watermarkContainer.appendChild(img);
   content.appendChild(watermarkContainer);
};

// O bloco abaixo cria a janela de SLIDE para o data-show (não modificado)
function abrirJanelaSlide(livroAtual, capituloAtual, versiculoAtual) {
   // Implementação da janela de slide...
}


Principais Alterações:
Carregamento de Versículos:
A função loadVersiculo agora busca dados diretamente do arquivo JSON correspondente ao livro.
Estrutura do JSON:
A estrutura do JSON foi considerada ao acessar os dados dos versículos.
Botões de Versículos:
Os botões agora chamam loadVersiculo diretamente com base no capítulo e no número do versículo.
Função getNumVersiculos:
Mantive essa função para retornar o número correto de versículos por capítulo.
Certifique-se de ajustar as partes onde novos livros ou capítulos são adicionados ao objeto livros e à função getNumVersiculos. Teste as alterações em um ambiente adequado para garantir que tudo funcione como esperado.

Conclusão
Essas modificações permitirão que seu script busque os capítulos da Bíblia diretamente do arquivo JSON em vez de arquivos HTML. Certifique-se de testar as alterações para garantir que todos os dados sejam carregados corretamente e que a interface do usuário funcione conforme esperado.