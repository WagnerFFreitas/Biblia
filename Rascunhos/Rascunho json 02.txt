// brackbox O bloco abaixo define o objeto "livros" que armazena informações sobre os livros da Bíblia
const livros = {
    "genesis": {
        "capitulos": 50
    },
    "exodo": {
        "capitulos": 40
    },
    // adicione os demais livros e capítulos conforme necessário
};

// O bloco abaixo cria as variáveis globais para o elemento H2, livro ativo e botões de versículos ativo
let titulo = null;
let activeVersiculoButton = null;
let activeLivro = null;
let activeCapitulo = null;

// O bloco abaixo cria a função para configurar os botões dos capítulos
async function createCapitulosButtons(livro) {
    const response = await fetch(`json/${livro}_original.json`);
    const json = await response.json();
    const capitulosContainer = document.createElement('div');
    capitulosContainer.classList.add('capitulos');

    const chapters = Object.keys(json[livro]);
    chapters.forEach((chapter) => {
        const button = document.createElement('button');
        button.textContent = chapter;
        button.classList.add('botao-capitulo');
        button.addEventListener('click', () => {
            toggleVersiculos(livro, chapter);
        });
        capitulosContainer.appendChild(button);
    });
    return capitulosContainer;
}

// O bloco abaixo cria a função para carregar o conteúdo de um versículo específico
async function loadVersiculo(livro, capitulo, versiculo) {
    const response = await fetch(`json/${livro}_original.json`);
    const json = await response.json();
    const chapter = json[livro][capitulo];
    const verse = chapter.versiculos[versiculo - 1];
    const content = document.querySelector('.content');

    // O trecho abaixo remove qualquer texto de versículo existente
    const existingVersiculo = content.querySelector('.versiculo-texto');
    if (existingVersiculo) {
        existingVersiculo.remove();
    }

    const versiculoElement = document.createElement('div');
    versiculoElement.classList.add('versiculo', 'versiculo-texto');
    versiculoElement.textContent = verse || 'Versículo não encontrado.';

    content.appendChild(versiculoElement);
    titulo.textContent = `${livro.toUpperCase()} - CAPÍTULO ${capitulo} - VERSÍCULO ${versiculo}`;
}

// O bloco abaixo cria a função para exibir/ocultar os versículos
async function toggleVersiculos(livro, capitulo) {
    const content = document.querySelector('.content');
    
    // O trecho abaixo procura por elementos dos versículos ou capítulos existentes
    const existingVersiculos = content.querySelector(`.versiculos-${livro}-${capitulo}`);
    const allVersiculos = content.querySelectorAll('.book-content');

    // O trecho abaixo verifica se os versículos já estiverem visíveis, removê-los ao clicar novamente
    if (existingVersiculos) {
        existingVersiculos.remove();
        
        // O trecho abaixo remove o texto do versículo se os versículos forem recolhidos
        const existingVersiculo = content.querySelector('.versiculo-texto');
        if (existingVersiculo) {
            existingVersiculo.remove();
        }
    } else {
        // O trecho abaixo remove qualquer exibição anterior de capítulos e versículos
        allVersiculos.forEach(versiculo => versiculo.remove());

        // O trecho abaixo remove o texto do versículo quando um novo capítulo é clicado
        const existingVersiculo = content.querySelector('.versiculo-texto');
        if (existingVersiculo) {
            existingVersiculo.remove();
        }

        // O trecho abaixo adiciona os versículos do novo capítulo
        const bookContent = document.createElement('div');
        bookContent.classList.add('book-content', `versiculos-${livro}-${capitulo}`);
        titulo.textContent = `${livro.toUpperCase()} - CAPÍTULO ${capitulo}`;
        bookContent.appendChild(createVersiculosButtons(livro, capitulo));
        content.appendChild(bookContent);
        
        // A linha abaixo atualiza o capítulo ativo
        activeCapitulo = capitulo;
    }
}

// O bloco abaixo cria a função para configurar os botões de versículos
async function createVersiculosButtons(livro, capitulo) {
    const response = await fetch(`json/${livro}_original.json`);
    const json = await response.json();
    const chapter = json[livro][capitulo];
    const numVersiculos = chapter.versiculos.length;
    
    const versiculosContainer = document.createElement('div');
    versiculosContainer.classList.add('versiculos ');

    for (let i = 1; i <= numVersiculos; i++) {
        const button = document.createElement('button');
        button.textContent = ` ${i}`;
        button.classList.add('botao-versiculo');
        button.addEventListener('click', () => {
            toggleVersiculoText(livro, capitulo, i, button);
        });
        versiculosContainer.appendChild(button);
    }
    return versiculosContainer;
}

// O bloco abaixo cria a função para alternar o texto do versículo
function toggleVersiculoText(livro, capitulo, versiculo, button) {
    if (activeVersiculoButton === button) {
        // O trecho abaixo verifica se o botão clicado for o mesmo, caso sim, remover o texto
        const existingVersiculo = document.querySelector('.versiculo-texto');
        if (existingVersiculo) {
            existingVersiculo.remove();
        }
        activeVersiculoButton = null;
    } else {
        // O trecho abaixo verifica se e outro botão, caso sim, carregar o novo versículo
        loadVersiculo(livro, capitulo, versiculo);
        activeVersiculoButton = button;
    }
}

// O bloco abaixo cria a função para obter o número de versículos em um capítulo específico
async function getNumVersiculos(livro, capitulo) {
    const response = await fetch(`json/${livro}_original.json`);
    const json = await response.json();
    const chapter = json[livro][capitulo];
    return chapter.versiculos.length;
}

// O bloco abaixo cria a função para carregar o livro
function loadBook(livro) {
    const content = document.querySelector('.content');

    // O trecho abaixo verifica se o livro clicado é o mesmo que está ativo
    if (activeLivro === livro) {
        // O trecho abaixo verifica se e o mesmo livro, remove apenas os capítulos e versículos, mantendo a marca d'água
        const capitulosContainer = content.querySelector('.capitulos-container');
        const versiculoTexto = content.querySelector('.versiculo-texto');
        if (capitulosContainer) {
            capitulosContainer.remove();
        }
        if (versiculoTexto) {
            versiculoTexto.remove();
        }
        titulo.textContent = '';

        // O trecho abaixo remove todos os botões de capítulos e versículos
        const allBookContents = content.querySelectorAll('.book-content');
        allBookContents.forEach(content => content.remove());

        // O trecho abaixo limpa o livro ativo
        activeLivro = null;
        activeCapitulo = null;
        return;
    }

    // O trecho abaixo limpa o conteúdo anterior, exceto a marca d'água
    const elementsToRemove = content.querySelectorAll('h2, .capitulos-container, .versiculo-texto, .book-content');
    elementsToRemove.forEach(element => element.remove());

    // O trecho abaixo adiciona o título do livro e os botões de capítulos
    titulo = document.createElement('h2');
    titulo.textContent = `${livro.toUpperCase()}`;
    content.appendChild(titulo);

    const capitulosContainer = document.createElement('div');
    capitulosContainer.classList.add('capitulos-container');
    capitulosContainer.appendChild(await createCapitulosButtons(livro));

    content.appendChild(capitulosContainer);

    // O trecho abaixo define o livro ativo como o livro atual
    activeLivro = livro;
    activeCapitulo = null;
}

// O bloco abaixo adiciona eventos de clique aos links dos livros
document.querySelectorAll('.menu-livros a').forEach(link => {
    link.addEventListener('click', (event) => {
        event.preventDefault();
        const livro = link.dataset.livro;
        loadBook(livro);
    });
});

// O bloco abaixo carrega a imagem da Bíblia assim que a página abre
window.onload = () => {
    const content = document.querySelector('.content');
    const watermarkContainer = document.createElement('div');
    watermarkContainer.classList.add('watermark');
    
    const img = document.createElement('img');
    img.src = 'biblia.png';
    img.alt = "Marca d'água da Bíblia";
    img.classList.add('watermark-image');
    
    watermarkContainer.appendChild(img);
    content.appendChild(watermarkContainer);
};

// O bloco abaixo cria a janela de SLIDE para o data-show
function abrirJanelaSlide(livroAtual, capituloAtual, versiculoAtual) {
    
    // O trecho abaixo verifica se a janela já está aberta e não está fechada
    if (window.janelaSlide && !window.janelaSlide.closed) {
        window.janelaSlide.focus();
        return;
    }

    // O trecho abaixo obtém a largura e altura da tela do usuário
 const largura = window.screen.availWidth;
    const altura = window.screen.availHeight;

    // O trecho abaixo abre uma nova janela com as dimensões especificadas
    window.janelaSlide = window.open('', 'JanelaSlide', `width=${largura},height=${altura}`);

    window.janelaSlide.document.open();
    window.janelaSlide.document.write(`
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
            <title>Janela Slide</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                /* O bloco abaixo cria o estilo do corpo da pagina do SLIDE */
                body { 
                    font-family: sans-serif; 
                    padding: 1.25rem;
                    background-color: #181818;
                    color: white; 
                    position: relative; 
                    margin-top: -2.5rem;
                    margin-left: 0;
                    overflow: hidden;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    font-style: italic;
                    font-weight: bold;
                }

                /* O bloco abaixo cria o estilo para os botões */
                button { 
                    padding: 0.63rem 1.25rem; 
                    font-size: clamp(1rem, 2vw + 0.5rem, 1.5rem);
                    background-color: white;
                    color: black; 
                    border: none; 
                    cursor: pointer; 
                    position: relative;
                    display: inline-block;
                    text-align: center;
                    transition: background-color 0.3s ease, color 0.3s ease; /* Transição suave */
                }

                /* O bloco abaixo configura o efeito ao passar o mouse, mudando a cor dos botões */
                button:hover { 
                    background-color: black;
                    color: white;
                }

                /* O bloco abaixo cria o estilos para o container do versículo */
                #versiculo-container { 
                    display: flex;
                    justify-content: center;
                    margin-bottom: 0.63rem;
                    font-size: clamp(4rem, 8vw, 6rem);
                }

                /* O bloco abaixo configura o titulo (Livro, Capitulo Nº e versiculo nº ) */
                #titulo { 
                    font-size: 3vw;
                    margin-bottom: 1.25rem; 
                    text-align: center;
                    color: #f1c40f;
                }
                
                /* O bloco abaixo configura o estilo dos textos dos versiculos */
                .versiculo-texto { 
                    /*text-align: justify;*/
                    text-align: center;
                    /*font-size: clamp(3rem, 4vw, 8rem);*/
                    font-size: 5vw;
                    max-width: 100vw;
                    overflow-wrap: break-word;
                }

                /* O bloco abaixo configura o estilo do titulo dos versiculos */
                #versiculo-container strong { 
                    color: #5df565;
                    font-size: 3.5vw;
                    margin-top: 0.63rem;
                    display: block;
                }
                
                /* O bloco abaixo coloca a imagem de fundo em marca d'água */
                #watermark {
                    position: fixed;
                    top: 0; 
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-image: url('biblia.png'); 
                    opacity: 0.3;
                    z-index: 10;
                    pointer-events: none;
                    overflow: hidden;
                    background-size: cover;
                    background-repeat: no-repeat;
                    background-position: center;
                }

                /* O bloco abaixo configura o estilos para o container dos botões */
                #botao-container {
                    position: absolute;
                    bottom: 2rem;
                    left: 2.5rem;
                    display: flex;
                    gap: 0.63rem;
                }

                /* O bloco abaixo configura o estilos para os botões "voltar" e "próximo" */
                #voltar-botao,
                #proximo-botao {
                    background-color: white;
                    border: none;
                    padding: 0.5rem 1.5rem;
                    font-size: 1.5rem;
                    font-weight: 900;
                    font-style: italic;
                    position: relative;
                    display: inline-block;
                    text-align: center;
                    transition: background-color 0.3s ease, color 0.3s ease;
                }

                /* O bloco abaixo configura o efeito ao passar o mouse , mudando a cor dos botões "voltar" e "próximo" */
                #voltar-botao:hover,
                #proximo-botao:hover {
                    background-color: black;
                    color: white;
                }

                /* O bloco abaixo cria e configura as pontas da setas */
                #voltar-botao::before,
                #proximo-botao::after {
                    content: '';
                    position: absolute;
                    top: 50%;
                    transform: translateY(-50%);
                    width: 0;
                    height: 0;
                    border-style: solid;
                    border-width: 45px;
                    transition: border-color 0.3s ease; 
                }

                /* O bloco abaixo configura o estilos para a seta do botão "voltar" */
                #voltar-botao::before {
                    left: -85px;
                    border-color: transparent white transparent transparent;
                }

                /* O bloco abaixo configura o estilos para a seta do botão "próximo" */
                #proximo-botao::after {
                    right: -75px;
                    border-color: transparent transparent transparent white;
                }

                /* O bloco abaixo configura o efeito ao passar o mouse, ficando transparente a seta "voltar" */
                #voltar-botao:hover::before {
                    border-color: transparent black transparent transparent;
                }

                /* O bloco abaixo configura o efeito ao passar o mouse, ficando transparente a seta "próximo" */
                #proximo-botao:hover::after {
                    border-color: transparent transparent transparent black;
                }
            </style>
        </head>
        <body>
            <div id="watermark"></div>
            <div id="titulo">${livroAtual.toUpperCase()} - CAPÍTULO ${capituloAtual} - VERSÍCULO ${versiculoAtual}</div>
            <div id="versiculo-container"><div class="versiculo-texto">Carregando...</div></div>
            <div id="botao-container">
                <button id="voltar-botao">VOLTAR</button>
                <button id="proximo-botao">PRÓXIMO</button>
            </div>
            <script>
                let capituloAtual = ${capituloAtual};
                let versiculoAtual = ${versiculoAtual};
                const livroAtual = '${livroAtual}';
                let capituloConteudo = '';

                function carregarCapitulo(capitulo) {
                    fetch(`json/${livroAtual}_original.json`)
                        .then(response => response.json())
                        .then(json => {
                            capituloConteudo = json[livroAtual][capitulo].versiculos;
                            carregarVersiculo(versiculoAtual);
                        })
                        .catch(error => {
                            console.error('Erro ao carregar o capítulo:', error);
                            document.getElementById('versiculo-container').innerHTML = '<div class="versiculo-texto">Erro ao carregar capítulo</div>';
                        });
                }

                function carregarVersiculo(versiculo) {
                    const verse = capituloConteudo[versiculo - 1];
                    const versiculoContainer = document.getElementById('versiculo-container');
                    versiculoContainer.innerHTML = `<div class="versiculo-texto">${verse}</div>`;
                    document.getElementById('titulo').innerText = `${livroAtual.toUpperCase()} - CAPÍTULO ${capituloAtual} - VERSÍCULO ${versiculo}`;
                }

                function proximoVersiculo() {
                    versiculoAtual++;
                    if (versiculoAtual > capituloConteudo.length) {
                        versiculoAtual = 1;
                        capituloAtual++;
                        carregarCapitulo(capituloAtual);
                    } else {
                        carregarVersiculo(versiculoAtual);
                    }
                }

                function voltarVersiculo() {
                    versiculoAtual--;
                    if (versiculoAtual < 1) {
                        versiculoAtual = capituloConteudo.length;
                    }
                    carregarVersiculo(versiculoAtual);
                }

                document.getElementById('proximo-botao').addEventListener('click', proximoVersiculo);
                document.getElementById('voltar-botao').addEventListener('click', voltarVersiculo);

                carregarCapitulo(capituloAtual);
            </script>
        </body>
        </html>
    `);
    window.janelaSlide.document.close();
}

// O bloco abaixo adiciona o evento de clique ao link "Slide" na janela principal
document.querySelector('header nav ul li:first-child a').addEventListener('click', (event) => {
    event.preventDefault();
    abrirJanelaSlide(activeLivro, activeCapitulo, activeVersiculoButton ? activeVersiculoButton.textContent.trim() : 1);
});



const downloads = [
    { texto: 'A Bíblia Católica', link: 'baixar/A_Biblia _Catolica.pdf' },
    { texto: 'A Bíblia Sagrada NVT', link: 'baixar/A_Biblia_Sagrada_NVT.pdf' },
    { texto: 'A Bíblia Viva', link: 'baixar/A_Biblia_Viva.pdf' },
    { texto: 'A vida completa de Jesus<br>Pr. Juanribe<br>Pagliarin', link: 'baixar/A_vida_completa_de_Jesus_Pr_Juanribe_Pagliarin.pdf' },
    { texto: 'Bíblia de Genebra<br>(só estudo)', link: 'baixar/Biblia_Genebra_so_estudo.pdf' },
    { texto: 'Bíblia em ordem<br>cronológica NVI', link: 'baixar/Biblia_em_ordem_cronologica_NVI.pdf' },
    { texto: 'Bíblia explicada', link: 'baixar/Biblia_explicada.pdf' },
    { texto: 'Bíblia KJA', link: 'baixar/Biblia_KJA.pdf' },
    { texto: 'Bíblia<br>Palavra-Chave', link: 'baixar/Biblia_palavra_chave.pdf' },
    { texto: 'Bíblia Thompson<br>Temas em Cadeia', link: 'baixar/Biblia_Thompson_temas_em_cadeia.pdf' }
];

const listaBaixar = document.getElementById('Baixar');
downloads.forEach(download => {
    const li = document.createElement('li');
    const a = document.createElement('a');
    a.href = download.link;
    a.innerHTML = download.texto;
    a.target = '_blank'; // Abre o link em uma nova janela
    li.appendChild(a);
    listaBaixar.appendChild(li);
});

const dropdown = document.querySelector('.dropdown');

// Função para mostrar a lista
function showList() {
    listaBaixar.style.display = 'block';
}

// Função para esconder a lista
function hideList() {
    listaBaixar.style.display = 'none';
}

// Eventos de mouse
dropdown.addEventListener('mouseenter', showList);
listaBaixar.addEventListener('mouseenter', showList);
dropdown.addEventListener('mouseleave', () => {
    setTimeout(() => {
        if (!dropdown.matches(':hover') && !listaBaixar.matches(':hover')) {
            hideList();
        }
    }, 200); // Atraso para dar tempo de mover o mouse
});

listaBaixar.addEventListener('mouseleave', () => {
    setTimeout(() => {
        if (!dropdown.matches(':hover') && !listaBaixar.matches(':hover')) {
            hideList();
        }
    }, 200);
});