/*===============================================================================*/
/*              SCRIPT PRINCIPAL DE NAVEGA√á√ÉO E INICIALIZA√á√ÉO (APP)              */
/*===============================================================================*/
/*    - Gerencia a navega√ß√£o entre as se√ß√µes: Concord√¢ncia, Dicion√°rio e Sobre.  */
/*    - Instancia e inicializa os m√≥dulos principais (DataManager, etc.).        */
/*    - Controla a visibilidade das se√ß√µes e do menu alfab√©tico.                 */
/*===============================================================================*/

class MainApp {
    // Este bloco e o Construtor da classe MainApp.
    constructor() {                                                                // Inicializa os componentes principais da aplica√ß√£o, centralizando o controle.
        window.dataManager = new DataManager();                                    // Instancia o gerenciador de dados da concord√¢ncia.
        window.concordanciaOptimized = new ConcordanciaOptimized();                // Instancia o controlador da interface da concord√¢ncia.
        window.dicionario = new Dicionario();                                      // Instancia o controlador do dicion√°rio.

        this.currentSection = 'concordancia';                                      // Define a se√ß√£o inicial como 'concordancia'.
        this.initializeElements();                                                 // Mapeia os elementos do DOM.
        this.bindEvents();                                                         // Vincula os eventos de navega√ß√£o.
        this.initializeApp();                                                      // Configura o estado inicial da aplica√ß√£o.
    }

    //Este bloco mapeia os elementos do DOM para a propriedade 'elements' para f√°cil acesso.
    initializeElements() {
        this.elements = {
            menuPrincipal: document.getElementById('menu-principal'),              // Bot√£o para o menu principal.
            concordanciaBtn: document.getElementById('concordancia'),              // Bot√£o para a se√ß√£o de Concord√¢ncia.
            dicionarioBtn: document.getElementById('dicionario'),                  // Bot√£o para a se√ß√£o de Dicion√°rio.
            sobreBtn: document.getElementById('sobre'),                            // Bot√£o para a se√ß√£o Sobre.
            mensagemInicial: document.getElementById('mensagem-inicial'),          // Container da mensagem inicial.
            secaoConcordancia: document.getElementById('secao-concordancia'),      // Elemento da se√ß√£o de Concord√¢ncia.
            secaoDicionario: document.getElementById('secao-dicionario'),          // Elemento da se√ß√£o de Dicion√°rio.
            secaoSobre: document.getElementById('secao-sobre'),                    // Elemento da se√ß√£o Sobre.
            menuAlfabetico: document.querySelector('.menu-alfabetico'),            // Menu lateral com as letras do alfabeto.
            tituloMenu: document.querySelector('.titulo-menu'),
            menuOpcoes: document.querySelector('.menu-opcoes'),
            nav: document.querySelector('nav')
        };
    }

    // Este bloco vincula todos os eventos necess√°rios para a navega√ß√£o principal.
    bindEvents() {                                                                 // Adiciona evento de clique para o bot√£o 'Concord√¢ncia'.
        this.elements.concordanciaBtn.addEventListener('click', (e) => {
            e.preventDefault();                                                    // Previne a a√ß√£o padr√£o do link.
            this.showSection('concordancia');                                      // Mostra a se√ß√£o de concord√¢ncia.
        });

        // Este bloco adiciona evento de clique para o bot√£o 'Dicion√°rio'.
        this.elements.dicionarioBtn.addEventListener('click', (e) => {
            e.preventDefault();                                                    // Previne a a√ß√£o padr√£o do link.
            this.showSection('dicionario');                                        // Mostra a se√ß√£o de dicion√°rio.
        });

        // Este bloco adiciona evento de clique para o bot√£o 'Sobre'.
        this.elements.sobreBtn.addEventListener('click', (e) => {
            e.preventDefault();                                                    // Previne a a√ß√£o padr√£o do link.
            this.showSection('sobre');                                             // Mostra a se√ß√£o sobre.
        });

        // Este bloco adiciona eventos de teclado para navega√ß√£o r√°pida entre se√ß√µes (Ctrl + 1, 2, 3).
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey) {                                                       // Verifica se a tecla Ctrl est√° pressionada.
                switch (e.key) {
                    case '1':
                        e.preventDefault();
                        this.showSection('concordancia');
                        break;
                    case '2':
                        e.preventDefault();
                        this.showSection('dicionario');
                        break;
                    case '3':
                        e.preventDefault();
                        this.showSection('sobre');
                        break;
                }
            }
        });
    }

    // Este bloco inicializa o estado da aplica√ß√£o.
    initializeApp() {
        // this.showSection('concordancia'); // Removido para manter a mensagem inicial vis√≠vel
        this.elements.menuAlfabetico.style.display = 'none'; // Oculta o menu alfab√©tico inicialmente
        this.elements.tituloMenu.style.display = 'none';
        // this.elements.nav.style.justifyContent = 'center';  // Comentado, pois agora no CSS
        // this.elements.menuOpcoes.style.marginLeft = '0';    // Comentado, pois agora no CSS
        document.querySelector('#conteudo-principal').style.marginLeft = '0px';
        
        console.log('üìñ Concord√¢ncia e Dicion√°rio B√≠blico inicializado');                           // Log de sucesso.
        console.log('‚å®Ô∏è  Atalhos: Ctrl+1 (Concord√¢ncia), Ctrl+2 (Dicion√°rio), Ctrl+3 (Sobre)');    // Informa sobre os atalhos.
        
        this.monitorPerformance();                                                                 // Inicia o monitoramento de performance.
    }

    // Controla a visibilidade das se√ß√µes da aplica√ß√£o.
    showSection(sectionName) {                                                     // Remove a classe 'active' de todos os bot√µes do menu.
        document.querySelectorAll('.menu-opcoes a').forEach(btn => {
            btn.classList.remove('active');
        });
    
        // Este bloco oculta todas as se√ß√µes para garantir um estado limpo.
        this.elements.mensagemInicial.style.display = 'none';
        this.elements.secaoConcordancia.classList.remove('secao-ativa');
        this.elements.secaoConcordancia.classList.add('secao-inativa');
        this.elements.secaoDicionario.classList.remove('secao-ativa');
        this.elements.secaoDicionario.classList.add('secao-inativa');
        this.elements.secaoSobre.classList.remove('secao-ativa');
        this.elements.secaoSobre.classList.add('secao-inativa');
    
        // Este bloco exibe a se√ß√£o correta com base no nome fornecido.
        switch (sectionName) {
            case 'concordancia':
                this.elements.secaoConcordancia.classList.remove('secao-inativa');
                this.elements.secaoConcordancia.classList.add('secao-ativa');
                this.elements.concordanciaBtn.classList.add('active');
                this.elements.menuAlfabetico.style.display = 'block';              // Exibe o menu alfab√©tico.
                this.currentSection = 'concordancia';
                break;
    
            case 'dicionario':
                this.elements.secaoDicionario.classList.remove('secao-inativa');
                this.elements.secaoDicionario.classList.add('secao-ativa');
                this.elements.dicionarioBtn.classList.add('active');
                this.elements.menuAlfabetico.style.display = 'block';              // Exibe o menu alfab√©tico.
                this.currentSection = 'dicionario';
                // Chama o m√©todo de inicializa√ß√£o do dicion√°rio para resetar sua view.
                if (window.dicionario && typeof window.dicionario.init === 'function') {
                    window.dicionario.init();
                }
                break;
    
            case 'sobre':
                this.elements.secaoSobre.classList.remove('secao-inativa');
                this.elements.secaoSobre.classList.add('secao-ativa');
                this.elements.sobreBtn.classList.add('active');
                this.elements.menuAlfabetico.style.display = 'none';               // Oculta o menu alfab√©tico.
                this.currentSection = 'sobre';
                break;
        }
    
        // Adicione ap√≥s o switch:
        this.elements.tituloMenu.style.display = 'block';
        this.elements.nav.style.justifyContent = 'flex-start';
        this.elements.menuOpcoes.style.marginLeft = '20px';
        const conteudoPrincipal = document.querySelector('#conteudo-principal');
        if (sectionName === 'sobre') {
            conteudoPrincipal.style.marginLeft = '40px';  // Alterado para 40px para ajustar o texto para a direita
        } else {
            conteudoPrincipal.style.marginLeft = '140px';
        }
    
        this.updatePageTitle(sectionName);                                         // Atualiza o t√≠tulo da p√°gina.
    }

    // Este bloco atualiza o t√≠tulo da aba do navegador com base na se√ß√£o ativa.
    updatePageTitle(sectionName) {
        const titles = {
            'inicial': 'Concord√¢ncia e Dicion√°rio B√≠blico',
            'concordancia': 'Concord√¢ncia B√≠blica',
            'dicionario': 'Dicion√°rio B√≠blico',
            'sobre': 'Sobre - Concord√¢ncia e Dicion√°rio B√≠blico'
        };
        document.title = titles[sectionName] || 'Concord√¢ncia e Dicion√°rio B√≠blico';     // Define o t√≠tulo ou um valor padr√£o.
    }

    // Este bloco monitora o uso de mem√≥ria e o tempo de carregamento da p√°gina.
    monitorPerformance() {                                                         // Verifica se a API de mem√≥ria est√° dispon√≠vel no navegador.
        if ('memory' in performance) {
            setInterval(() => {
                const memory = performance.memory;
                const memoryInfo = {
                    used: Math.round(memory.usedJSHeapSize / 1024 / 1024),         // Mem√≥ria usada em MB.
                    total: Math.round(memory.totalJSHeapSize / 1024 / 1024),       // Mem√≥ria total em MB.
                    limit: Math.round(memory.jsHeapSizeLimit / 1024 / 1024)        // Limite de mem√≥ria em MB.
                };

                if (memoryInfo.used > 100) {                                       // Alerta se o uso de mem√≥ria for alto e limpa o cache se for muito alto.
                    console.warn('‚ö†Ô∏è Alto uso de mem√≥ria:', memoryInfo);
                    if (window.dataManager && memoryInfo.used > 200) {
                        window.dataManager.clearCache();
                        console.log('üßπ Cache limpo para economizar mem√≥ria');
                    }
                }
            }, 30000);                                                             // Executa a cada 30 segundos.
        }

        //  este bloco mede e exibe o tempo de carregamento da p√°gina.
        window.addEventListener('load', () => {
            if (performance.timing.loadEventEnd > 0) {
                const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
                console.log(`‚è±Ô∏è Tempo de carregamento: ${loadTime}ms`);
            }
        });
    }

    // Este bloco retorna estat√≠sticas atuais da aplica√ß√£o para fins de depura√ß√£o.
    getStats() {
        const stats = {
            currentSection: this.currentSection,
            timestamp: new Date().toISOString()
        };
        if (window.dataManager) {
            stats.dataManager = window.dataManager.getCacheStats();                // Inclui estat√≠sticas do cache do DataManager.
        }
        return stats;
    }
}

// Este bloco inicializa a aplica√ß√£o principal quando o DOM estiver completamente carregado.
document.addEventListener('DOMContentLoaded', () => {
    window.mainApp = new MainApp();
});

// Este bloco exp√µe fun√ß√µes de depura√ß√£o na janela global.
window.debugApp = {
    getStats: () => window.mainApp?.getStats(),
    clearCache: () => window.dataManager?.clearCache(),
    showSection: (section) => window.mainApp?.showSection(section)
};