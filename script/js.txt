// O bloco abaixo cria a janela de SLIDE para o data-show
function abrirJanelaSlide(livroAtual, capituloAtual, versiculoAtual) {
    // Verifica se a janela já existe e está aberta
    if (window.janelaSlide && !window.janelaSlide.closed) {
        window.janelaSlide.focus();
        return;
    }

    // Configurações da janela
    const largura = window.screen.availWidth;
    const altura = window.screen.availHeight;
    const features = `width=${largura},height=${altura},menubar=no,toolbar=no,location=no,resizable=yes,scrollbars=yes`;

    // Abre a nova janela
    window.janelaSlide = window.open('', 'JanelaSlide', features);

    // Conteúdo HTML da janela Slide
    const slideHTML = `
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slide Bíblico - ${livroAtual} ${capituloAtual}:${versiculoAtual}</title>
    <style>
        body {
            font-family: 'Arial Black', 'Arial Bold', Gadget, sans-serif;
            background-color: #121212;
            color: #ffffff;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            text-align: center;
            overflow: hidden;
            font-style: italic;
        }
        #watermark {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('../img/biblia.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            opacity: 0.15;
            z-index: -1;
        }
        #header {
            padding: 15px 0;
            font-size: 2.5vmax;
            color: #f1c40f;
            text-transform: uppercase;
            background-color: rgba(0,0,0,0.7);
            width: 100%;
        }
        #content {
            flex: 1;
            display: flex;
            flex-direction: column;
            /*justify-content: center;*/
            align-items: center;
            padding: 20px;
            font-size: 2.6vmax;
            line-height: 1.5;
            max-width: 100%;
            margin: 0 auto;
            /*margin-bottom: -13px; */
            padding-bottom: 60px;   /* Adiciona espaço abaixo do texto */
            box-sizing: border-box
            
            justify-content: flex-start; /* Alinha conteúdo no topo */
            padding-top: 1rem; /* Reduz espaço acima do texto */
            min-height: auto; /* Remove altura mínima fixa */
            margin-top: 1rem; /* Compensa espaço residual */
        }
        /*#navigation {
            /*padding: 15px 0;
            padding: 15px 0 30px 0;
            background-color: rgba(0,0,0,0.7);
            width: 100%;
        }*/

        #navigation {
        position: fixed; /* Fixa os botões na tela */
        bottom: 0; /* Cola na base da viewport */
        left: 0;
        right: 0;
        padding: 15px 0;
        background-color: rgba(0,0,0,0.7);
        width: 100%;
        z-index: 1000; /* Garante que fique acima do conteúdo */
        display: flex;
        justify-content: center; /* Centraliza os botões */
        gap: 20px; /* Espaço entre os botões */
}

        .nav-button {
            padding: 12px 25px;
            font-size: 1.2rem;
            background-color: #f1c40f;
            color: #000;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: bold;
            margin: 0 10px;
        }
        .verse {
            display: none;
            width: 100%;
        }
        .verse.active {
            display: block;
            animation: fadeIn 0.5s ease-in-out;
        }
        .verse strong {
            font-weight: normal;
            font-size: 1.5em;
        }
        .verse > div:first-child {
            font-size: 0.7em;
            color: #f1c40f;
            margin-bottom: 15px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-style: italic;
            
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div id="watermark"></div>
    <div id="header">${livroAtual.toUpperCase()} ${capituloAtual}:${versiculoAtual}</div>
    <div id="content"></div>
    <div id="navigation">
        <button class="nav-button" id="prev-btn">‹ Anterior</button>
        <button class="nav-button" id="next-btn">Próximo ›</button>
    </div>

    <script>
        // Configurações iniciais
        const config = {
            livro: '${livroAtual}',
            capitulo: ${capituloAtual},
            versiculo: ${versiculoAtual},
            versiculos: [],
            totalVersiculos: 0
        };

        // Elementos DOM
        const elements = {
            header: document.getElementById('header'),
            content: document.getElementById('content'),
            prevBtn: document.getElementById('prev-btn'),
            nextBtn: document.getElementById('next-btn')
        };

        // Carrega o capítulo
        async function loadChapter() {
            try {
                elements.content.innerHTML = '<div style="padding: 20px; text-align: center;">Carregando...</div>';
                
                const response = await fetch('../version/arc/' + config.livro + '/' + config.capitulo + '.html');
                
                if (!response.ok) {
                    throw new Error('Capítulo não encontrado');
                }
                
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Extrai todos os versículos
                config.versiculos = Array.from(doc.querySelectorAll('[id^="versiculo-"]'));
                config.totalVersiculos = config.versiculos.length;
                
                if (config.totalVersiculos === 0) {
                    throw new Error('Nenhum versículo encontrado neste capítulo');
                }
                
                // Renderiza os versículos
                renderVerses();
                
                // Ajusta o versículo atual se necessário
                if (config.versiculo > config.totalVersiculos) {
                    config.versiculo = config.totalVersiculos;
                }
                
                showCurrentVerse();
                
            } catch (error) {
                console.error('Erro:', error);
                elements.content.innerHTML = \`
                    <div style="color: #e74c3c; padding: 20px; text-align: center;">
                        Erro ao carregar: \${error.message}<br><br>
                        Livro: \${config.livro}<br>
                        Capítulo: \${config.capitulo}<br>
                        Versículo: \${config.versiculo}
                    </div>
                \`;
            }
        }

        // Renderiza todos os versículos no DOM (inicialmente ocultos)
        function renderVerses() {
            elements.content.innerHTML = '';
            config.versiculos.forEach((verse, index) => {
                const verseElement = document.createElement('div');
                verseElement.className = 'verse';
                verseElement.id = 'verse-' + (index + 1);
                
                // Extrai o conteúdo da tag <strong> se existir
                const strongElement = verse.querySelector('strong');
                let verseContent = verse.innerHTML;
                
                if (strongElement) {
                    // Cria uma estrutura com o strong acima e o restante abaixo
                    verseContent = \`
                        <div>\${strongElement.outerHTML}</div>
                        <div>\${verse.innerHTML.replace(strongElement.outerHTML, '')}</div>
                    \`;
                }
                
                verseElement.innerHTML = verseContent;
                elements.content.appendChild(verseElement);
            });
        }

        // Mostra o versículo atual
        function showCurrentVerse() {
            // Oculta todos os versículos
            document.querySelectorAll('.verse').forEach(v => v.classList.remove('active'));
            
            // Mostra o versículo atual
            const currentVerse = document.getElementById('verse-' + config.versiculo);
            if (currentVerse) {
                currentVerse.classList.add('active');
                elements.header.textContent = \`\${config.livro.toUpperCase()} \${config.capitulo}:\${config.versiculo}\`;
            }
            
            // Atualiza estado dos botões
            elements.prevBtn.disabled = config.capitulo === 1 && config.versiculo === 1;
            elements.nextBtn.disabled = false;
        }

        // Navega para o próximo versículo
        function nextVerse() {
            if (config.versiculo < config.totalVersiculos) {
                config.versiculo++;
                showCurrentVerse();
            } else {
                nextChapter();
            }
        }

        // Navega para o capítulo seguinte
        async function nextChapter() {
            config.capitulo++;
            config.versiculo = 1;
            await loadChapter();
        }

        // Navega para o versículo anterior
        function prevVerse() {
            if (config.versiculo > 1) {
                config.versiculo--;
                showCurrentVerse();
            } else {
                prevChapter();
            }
        }

        // Navega para o capítulo anterior
        async function prevChapter() {
            if (config.capitulo > 1) {
                config.capitulo--;
                config.versiculo = 1;
                await loadChapter();
            }
        }

        // Event Listeners
        elements.nextBtn.addEventListener('click', nextVerse);
        elements.prevBtn.addEventListener('click', prevVerse);

        // Navegação por teclado
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowRight') nextVerse();
            if (e.key === 'ArrowLeft') prevVerse();
        });

        // Inicialização
        loadChapter();
    </script>
</body>
</html>
    `;

    // Escreve o conteúdo na janela
    window.janelaSlide.document.open();
    window.janelaSlide.document.write(slideHTML);
    window.janelaSlide.document.close();

    // Foca na janela
    window.janelaSlide.focus();
}


***************************

// O bloco abaixo cria a janela de SLIDE para o data-show
function abrirJanelaSlide(livroAtual, capituloAtual, versiculoAtual) {
    if (window.janelaSlide && !window.janelaSlide.closed) {
        window.janelaSlide.focus();
        return;
    }

    const largura = window.screen.availWidth;
    const altura = window.screen.availHeight;
    const features = `width=${largura},height=${altura},menubar=no,toolbar=no,location=no,resizable=yes,scrollbars=yes`;

    window.janelaSlide = window.open('', 'JanelaSlide', features);

    const slideHTML = `
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slide Bíblico - ${livroAtual} ${capituloAtual}:${versiculoAtual}</title>
    <style>
        body {
            font-family: 'Arial Black', 'Arial Bold', Gadget, sans-serif;
            background-color: #121212;
            color: #ffffff;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            text-align: center;
            overflow: hidden;
            font-style: italic;
        }
        #watermark {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('../img/biblia.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            opacity: 0.15;
            z-index: -1;
        }
        #header {
            padding: clamp(15px, 4vw, 25px) 0;
            font-size: clamp(1.8rem, 5vw, 3rem);
            color: #f1c40f;
            text-transform: uppercase;
            background-color: rgba(0,0,0,0.7);
            width: 100%;
            letter-spacing: 1.5px;
            line-height: 1.3;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            margin-bottom: 0.5rem;
        }
        #content {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: clamp(20px, 5vw, 50px);
            font-size: clamp(1.6rem, 3.2vw, 2.8rem);
            line-height: 1.7;
            max-width: 92%;
            margin: 0 auto;
            padding-bottom: 30px;
            box-sizing: border-box;
            min-height: auto;
            justify-content: flex-start;
        }
        #navigation {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 25px 0 15px 0;
            background-color: rgba(0,0,0,0.7);
            width: 100%;
            z-index: 1000;
            display: flex;
            justify-content: center;
            gap: clamp(10px, 2vw, 20px);
        }
        .nav-button {
            padding: clamp(10px, 2vw, 15px) clamp(20px, 4vw, 30px);
            font-size: clamp(1.1rem, 2.2vw, 1.4rem);
            background-color: #f1c40f;
            color: #000;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: bold;
            letter-spacing: 1px;
        }
        .verse {
            display: none;
            width: 100%;
            max-width: 1200px;
            padding: 0 20px;
        }
        .verse.active {
            display: block;
            animation: fadeIn 0.5s ease-in-out;
        }
        .verse strong {
            font-weight: bold !important;
            color: #f1c40f;
            font-style: normal;
        }
        .verse > div:first-child {
            font-size: clamp(1rem, 2.2vw, 1.4rem);
            color: #f1c40f;
            margin-bottom: 2.5rem;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            font-style: italic;
        }
        .fim-livro {
            color: #f1c40f !important;
            margin-top: 20px;
            font-size: clamp(1rem, 2vw, 1.2rem) !important;
            padding: 15px;
            border-top: 1px solid #f1c40f55;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @media (max-width: 768px) {
            #content {
                max-width: 95%;
                padding: 15px 10px;
                font-size: clamp(1.4rem, 4vw, 2.2rem);
            }
        }
    </style>
</head>
<body>
    <div id="watermark"></div>
    <div id="header">${livroAtual.toUpperCase()} ${capituloAtual}:${versiculoAtual}</div>
    <div id="content"></div>
    <div id="navigation">
        <button class="nav-button" id="prev-btn">‹ Anterior</button>
        <button class="nav-button" id="next-btn">Próximo ›</button>
    </div>

    <script>
        const config = {
            livro: '${livroAtual}',
            capitulo: ${capituloAtual},
            versiculo: ${versiculoAtual},
            versiculos: [],
            totalVersiculos: 0,
            ultimoCapitulo: false
        };

        const elements = {
            header: document.getElementById('header'),
            content: document.getElementById('content'),
            prevBtn: document.getElementById('prev-btn'),
            nextBtn: document.getElementById('next-btn')
        };

        async function checkNextChapter() {
            try {
                const response = await fetch('../version/arc/' + config.livro + '/' + (config.capitulo + 1) + '.html');
                return response.ok;
            } catch {
                return false;
            }
        }

        async function loadChapter() {
            try {
                elements.content.innerHTML = '<div style="padding: 20px;">Carregando...</div>';
                
                const response = await fetch('../version/arc/' + config.livro + '/' + config.capitulo + '.html');
                if (!response.ok) throw new Error('Capítulo não encontrado');
                
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                config.versiculos = Array.from(doc.querySelectorAll('[id^="versiculo-"]'));
                config.totalVersiculos = config.versiculos.length;
                
                config.ultimoCapitulo = !(await checkNextChapter());
                
                renderVerses();
                if (config.versiculo > config.totalVersiculos) config.versiculo = config.totalVersiculos;
                showCurrentVerse();
                
            } catch (error) {
                elements.content.innerHTML = \`
                    <div style="color: #e74c3c; padding: 20px;">
                        \${error.message}<br><br>
                        Livro: \${config.livro}<br>
                        Capítulo: \${config.capitulo}
                    </div>
                \`;
                config.ultimoCapitulo = true;
                updateButtons();
            }
        }

        function renderVerses() {
            elements.content.innerHTML = '';
            config.versiculos.forEach((verse, index) => {
                const verseElement = document.createElement('div');
                verseElement.className = 'verse';
                verseElement.id = 'verse-' + (index + 1);
                
                const strongElement = verse.querySelector('strong');
                let verseContent = verse.innerHTML;
                
                if (strongElement) {
                    verseContent = \`
                        <div>\${strongElement.outerHTML}</div>
                        <div>\${verse.innerHTML.replace(strongElement.outerHTML, '')}</div>
                    \`;
                }
                
                verseElement.innerHTML = verseContent;
                elements.content.appendChild(verseElement);
            });
        }

        function showCurrentVerse() {
            document.querySelectorAll('.verse').forEach(v => v.classList.remove('active'));
            const currentVerse = document.getElementById('verse-' + config.versiculo);
            if (currentVerse) {
                currentVerse.classList.add('active');
                elements.header.textContent = \`\${config.livro.toUpperCase()} \${config.capitulo}:\${config.versiculo}\`;
            }
            updateButtons();
        }

        function updateButtons() {
            elements.prevBtn.disabled = config.capitulo === 1 && config.versiculo === 1;
            elements.nextBtn.disabled = config.ultimoCapitulo && config.versiculo === config.totalVersiculos;
        }

        function nextVerse() {
            if (config.versiculo < config.totalVersiculos) {
                config.versiculo++;
                showCurrentVerse();
            } else {
                if (!config.ultimoCapitulo) {
                    nextChapter();
                } else {
                    elements.content.innerHTML += \`
                        <div class="fim-livro">
                            Fim do livro de \${config.livro}
                        </div>
                    \`;
                    elements.nextBtn.disabled = true;
                }
            }
        }

        async function nextChapter() {
            try {
                const hasNextChapter = await checkNextChapter();
                if (!hasNextChapter) throw new Error('Último capítulo deste livro');
                
                config.capitulo++;
                config.versiculo = 1;
                await loadChapter();
                
            } catch (error) {
                elements.content.innerHTML = \`
                    <div class="fim-livro">
                        \${error.message}<br>
                        Você chegou ao final do livro de \${config.livro}
                    </div>
                \`;
                config.ultimoCapitulo = true;
                updateButtons();
            }
        }

        function prevVerse() {
            if (config.versiculo > 1) {
                config.versiculo--;
                showCurrentVerse();
            } else {
                prevChapter();
            }
        }

        async function prevChapter() {
            if (config.capitulo > 1) {
                config.capitulo--;
                config.versiculo = 1;
                await loadChapter();
            }
        }

        elements.nextBtn.addEventListener('click', nextVerse);
        elements.prevBtn.addEventListener('click', prevVerse);

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowRight') nextVerse();
            if (e.key === 'ArrowLeft') prevVerse();
        });

        loadChapter();
    </script>
</body>
</html>
    `;

    window.janelaSlide.document.open();
    window.janelaSlide.document.write(slideHTML);
    window.janelaSlide.document.close();
    window.janelaSlide.focus();
}